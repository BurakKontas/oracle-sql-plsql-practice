[
  {
    "title": "1. List all customer names in alphabetical order.",
    "hint": "Use the Customers table and ORDER BY for sorting.",
    "sql": "SELECT COMPANY_NAME FROM Customers ORDER BY COMPANY_NAME"
  },
  {
    "title": "2. Show products that are out of stock along with their category names.",
    "hint": "JOIN Products and Categories tables, use WHERE UNITS_IN_STOCK = 0 condition.",
    "sql": "SELECT p.PRODUCT_NAME, c.CATEGORY_NAME FROM Products p JOIN Categories c ON p.CATEGORY_ID = c.CATEGORY_ID WHERE p.UNITS_IN_STOCK = 0"
  },
  {
    "title": "3. List the total quantity of products in each order.",
    "hint": "Sum the Quantity column in Order Details table, use GROUP BY ORDER_ID.",
    "sql": "SELECT ORDER_ID, SUM(QUANTITY) AS TotalQuantity FROM ORDER_DETAILS GROUP BY ORDER_ID"
  },
  {
    "title": "4. Find the order with the most products.",
    "hint": "Use SUM(Quantity) in Order Details, sort with ORDER BY DESC and take FETCH FIRST 1 ROW ONLY.",
    "sql": "SELECT ORDER_ID, SUM(QUANTITY) AS TotalQuantity FROM ORDER_DETAILS GROUP BY ORDER_ID ORDER BY SUM(QUANTITY) DESC FETCH FIRST 1 ROW ONLY"
  },
  {
    "title": "5. Calculate the total stock quantity for each category.",
    "hint": "JOIN Products and Categories tables, use SUM(UNITS_IN_STOCK).",
    "sql": "SELECT c.CATEGORY_NAME, SUM(p.UNITS_IN_STOCK) AS TotalStock FROM Categories c JOIN Products p ON c.CATEGORY_ID = p.CATEGORY_ID GROUP BY c.CATEGORY_ID, c.CATEGORY_NAME"
  },
  {
    "title": "6. List products whose names contain spaces.",
    "hint": "Use PRODUCT_NAME LIKE '% %' condition in Products table.",
    "sql": "SELECT PRODUCT_NAME FROM Products WHERE PRODUCT_NAME LIKE '% %'"
  },
  {
    "title": "7. Calculate the total revenue of all orders.",
    "hint": "Use the formula (UNIT_PRICE * QUANTITY * (1 - DISCOUNT)) in Order Details.",
    "sql": "SELECT SUM(UNIT_PRICE * QUANTITY * (1 - DISCOUNT)) AS TotalRevenue FROM ORDER_DETAILS"
  },
  {
    "title": "8. Find the number of different products used in each order.",
    "hint": "Use COUNT(DISTINCT PRODUCT_ID) in Order Details, GROUP BY ORDER_ID.",
    "sql": "SELECT ORDER_ID, COUNT(DISTINCT PRODUCT_ID) AS UniqueProducts FROM ORDER_DETAILS GROUP BY ORDER_ID"
  },
  {
    "title": "9. Find the total number of products sold by each employee.",
    "hint": "JOIN Orders and Order Details tables, use SUM(Quantity).",
    "sql": "SELECT e.FIRSTNAME || ' ' || e.LASTNAME AS EmployeeName, SUM(od.QUANTITY) AS TotalProductsSold FROM Employees e JOIN Orders o ON e.EMPLOYEE_ID = o.EMPLOYEE_ID JOIN ORDER_DETAILS od ON o.ORDER_ID = od.ORDER_ID GROUP BY e.EMPLOYEE_ID, e.FIRSTNAME, e.LASTNAME"
  },
  {
    "title": "10. Match suppliers and customers in the same city.",
    "hint": "JOIN Suppliers and Customers tables on City.",
    "sql": "SELECT s.COMPANY_NAME AS SupplierName, c.COMPANY_NAME AS CustomerName, s.City FROM Suppliers s JOIN Customers c ON s.City = c.City ORDER BY s.City"
  },
  {
    "title": "11. Calculate the average order revenue for each year.",
    "hint": "Use EXTRACT(YEAR FROM ORDER_DATE) function, take average with AVG.",
    "sql": "SELECT TO_CHAR(o.ORDER_DATE, 'YYYY') AS OrderYear, AVG(od.UNIT_PRICE * od.QUANTITY * (1 - od.DISCOUNT)) AS AvgOrderRevenue FROM ORDERS o JOIN ORDER_DETAILS od ON o.ORDER_ID = od.ORDER_ID GROUP BY TO_CHAR(o.ORDER_DATE, 'YYYY')"
  },
  {
    "title": "12. Find the top 3 countries with the most customers.",
    "hint": "GROUP BY Country in Customers table, count with COUNT(*), ORDER BY DESC TOP 3.",
    "sql": "SELECT Country, COUNT(*) AS CustomerCount FROM Customers GROUP BY Country ORDER BY COUNT(*) DESC FETCH FIRST 3 ROW ONLY"
  },
  {
    "title": "13. List the average product price per supplier.",
    "hint": "GROUP BY SUPPLIER_ID in Products table, use AVG(UNIT_PRICE).",
    "sql": "SELECT s.COMPANY_NAME, AVG(p.UNIT_PRICE) AS AvgProductPrice FROM Suppliers s JOIN Products p ON s.SUPPLIER_ID = p.SUPPLIER_ID GROUP BY s.SUPPLIER_ID, s.COMPANY_NAME"
  },
  {
    "title": "14. List products that start with 'a' and end with 's'.",
    "hint": "Use PRODUCT_NAME LIKE 'a%s' condition.",
    "sql": "SELECT PRODUCT_NAME FROM Products WHERE PRODUCT_NAME LIKE 'a%s'"
  },
  {
    "title": "15. Calculate the total revenue of products in the 'Beverages' category.",
    "hint": "JOIN Products, Categories and Order Details tables.",
    "sql": "SELECT SUM(od.UNIT_PRICE * od.QUANTITY * (1 - od.DISCOUNT)) AS BeveragesRevenue FROM ORDER_DETAILS od JOIN Products p ON od.PRODUCT_ID = p.PRODUCT_ID JOIN Categories c ON p.CATEGORY_ID = c.CATEGORY_ID WHERE c.CATEGORY_NAME = 'Beverages'"
  },
  {
    "title": "16. List the products provided by each supplier and their total stock.",
    "hint": "JOIN Suppliers and Products tables, use SUM(UNITS_IN_STOCK).",
    "sql": "SELECT s.COMPANY_NAME, COUNT(p.PRODUCT_ID) AS ProductCount, SUM(p.UNITS_IN_STOCK) AS TotalStock FROM Suppliers s JOIN Products p ON s.SUPPLIER_ID = p.SUPPLIER_ID GROUP BY s.SUPPLIER_ID, s.COMPANY_NAME"
  },
  {
    "title": "17. Find products that have been ordered at least twice.",
    "hint": "GROUP BY PRODUCT_ID in Order Details, use COUNT(*) >= 2 condition.",
    "sql": "SELECT PRODUCT_ID, COUNT(*) AS OrderCount FROM ORDER_DETAILS GROUP BY PRODUCT_ID HAVING COUNT(*) >= 2"
  },
  {
    "title": "18. List the number of customers and average order amount for each country.",
    "hint": "JOIN Customers, Orders and Order Details tables.",
    "sql": "SELECT c.Country, COUNT(DISTINCT c.CUSTOMER_ID) AS CustomerCount, AVG(od.UNIT_PRICE * od.QUANTITY * (1 - od.DISCOUNT)) AS AvgOrderAmount FROM Customers c JOIN Orders o ON c.CUSTOMER_ID = o.CUSTOMER_ID JOIN ORDER_DETAILS od ON o.ORDER_ID = od.ORDER_ID GROUP BY c.Country"
  },
  {
    "title": "19. List the last 3 orders for each employee.",
    "hint": "Use window function ROW_NUMBER() OVER (PARTITION BY EMPLOYEE_ID ORDER BY ORDER_DATE DESC).",
    "sql": "SELECT EMPLOYEE_ID, ORDER_ID, ORDER_DATE FROM ( SELECT EMPLOYEE_ID, ORDER_ID, ORDER_DATE, ROW_NUMBER() OVER (PARTITION BY EMPLOYEE_ID ORDER BY ORDER_DATE DESC) as rn FROM Orders ) ranked WHERE rn <= 3"
  },
  {
    "title": "20. Find the total annual sales amount per employee.",
    "hint": "JOIN Orders and Order Details, group by EXTRACT(YEAR FROM ORDER_DATE).",
    "sql": "SELECT e.FIRSTNAME || ' ' || e.LASTNAME AS EmployeeName, EXTRACT(YEAR FROM o.ORDER_DATE) AS OrderYear, SUM(od.UNIT_PRICE * od.QUANTITY * (1 - od.DISCOUNT)) AS TotalSales FROM Employees e JOIN Orders o ON e.EMPLOYEE_ID = o.EMPLOYEE_ID JOIN ORDER_DETAILS od ON o.ORDER_ID = od.ORDER_ID GROUP BY e.EMPLOYEE_ID, e.FIRSTNAME, e.LASTNAME, EXTRACT(YEAR FROM o.ORDER_DATE)"
  },
  {
    "title": "21. Calculate the total discount amount for each order.",
    "hint": "Use SUM(UNIT_PRICE * QUANTITY * DISCOUNT) in Order Details, filter WHERE DISCOUNT > 0.",
    "sql": "SELECT ORDER_ID, SUM(UNIT_PRICE * QUANTITY * DISCOUNT) AS TotalDiscount FROM ORDER_DETAILS WHERE DISCOUNT > 0 GROUP BY ORDER_ID"
  },
  {
    "title": "22. Calculate the average price and price variance for each category.",
    "hint": "JOIN Categories and Products, use AVG() and VAR_SAMP() functions.",
    "sql": "SELECT c.CATEGORY_NAME, AVG(p.UNIT_PRICE) AS AvgPrice, VARIANCE(p.UNIT_PRICE) AS PriceVariance FROM Categories c JOIN Products p ON c.CATEGORY_ID = p.CATEGORY_ID GROUP BY c.CATEGORY_ID, c.CATEGORY_NAME"
  },
  {
    "title": "23. Find the top 3 best-selling products in 1996.",
    "hint": "JOIN Products and Order Details, filter by EXTRACT(YEAR FROM ORDER_DATE) = 1996, use SUM(QUANTITY).",
    "sql": "SELECT p.PRODUCT_NAME, SUM(od.QUANTITY) AS TotalSold FROM Products p JOIN ORDER_DETAILS od ON p.PRODUCT_ID = od.PRODUCT_ID JOIN Orders o ON od.ORDER_ID = o.ORDER_ID WHERE EXTRACT(YEAR FROM o.ORDER_DATE) = 1996 GROUP BY p.PRODUCT_ID, p.PRODUCT_NAME ORDER BY SUM(od.QUANTITY) DESC FETCH FIRST 3 ROWS ONLY"
  },
  {
    "title": "24. Find products with the same price from different suppliers.",
    "hint": "Self-join Products table on UNIT_PRICE, ensure different SUPPLIER_ID.",
    "sql": "SELECT p1.PRODUCT_NAME, p1.UNIT_PRICE, s1.COMPANY_NAME AS Supplier1, s2.COMPANY_NAME AS Supplier2 FROM Products p1 JOIN Products p2 ON p1.UNIT_PRICE = p2.UNIT_PRICE AND p1.SUPPLIER_ID != p2.SUPPLIER_ID JOIN Suppliers s1 ON p1.SUPPLIER_ID = s1.SUPPLIER_ID JOIN Suppliers s2 ON p2.SUPPLIER_ID = s2.SUPPLIER_ID WHERE p1.PRODUCT_ID < p2.PRODUCT_ID"
  },
  {
    "title": "25. Find the order with the longest shipping time.",
    "hint": "Use DATEDIFF(day, ORDER_DATE, SHIPPED_DATE), filter WHERE SHIPPED_DATE IS NOT NULL.",
    "sql": "SELECT ORDER_ID, ORDER_DATE, SHIPPED_DATE, (SHIPPED_DATE - ORDER_DATE) AS DaysDifference FROM Orders WHERE SHIPPED_DATE IS NOT NULL ORDER BY (SHIPPED_DATE - ORDER_DATE) DESC FETCH FIRST 1 ROW ONLY"
  },
  {
    "title": "26. Calculate the average number of orders per day for each employee.",
    "hint": "Count orders and distinct order dates, divide to get average.",
    "sql": "SELECT e.FIRSTNAME || ' ' || e.LASTNAME AS EmployeeName, COUNT(o.ORDER_ID) * 1.0 / COUNT(DISTINCT o.ORDER_DATE) AS AvgOrdersPerDay FROM Employees e JOIN Orders o ON e.EMPLOYEE_ID = o.EMPLOYEE_ID GROUP BY e.EMPLOYEE_ID, e.FIRSTNAME, e.LASTNAME"
  },
  {
    "title": "27. Calculate the average order amount for each customer.",
    "hint": "Sum total revenue and divide by number of distinct orders.",
    "sql": "SELECT c.COMPANY_NAME, SUM(od.UNIT_PRICE * od.QUANTITY * (1 - od.DISCOUNT)) / COUNT(DISTINCT o.ORDER_ID) AS AvgOrderAmount FROM Customers c JOIN Orders o ON c.CUSTOMER_ID = o.CUSTOMER_ID JOIN ORDER_DETAILS od ON o.ORDER_ID = od.ORDER_ID GROUP BY c.CUSTOMER_ID, c.COMPANY_NAME"
  },
  {
    "title": "28. Calculate the total revenue for each category.",
    "hint": "JOIN Categories, Products and Order Details tables.",
    "sql": "SELECT c.CATEGORY_NAME, SUM(od.UNIT_PRICE * od.QUANTITY * (1 - od.DISCOUNT)) AS TotalRevenue FROM Categories c JOIN Products p ON c.CATEGORY_ID = p.CATEGORY_ID JOIN ORDER_DETAILS od ON p.PRODUCT_ID = od.PRODUCT_ID GROUP BY c.CATEGORY_ID, c.CATEGORY_NAME"
  },
  {
    "title": "29. Find the number of unique customers for each product.",
    "hint": "JOIN Products, Order Details and Orders, use COUNT(DISTINCT CUSTOMER_ID).",
    "sql": "SELECT p.PRODUCT_NAME, COUNT(DISTINCT o.CUSTOMER_ID) AS UniqueCustomers FROM Products p JOIN ORDER_DETAILS od ON p.PRODUCT_ID = od.PRODUCT_ID JOIN Orders o ON od.ORDER_ID = o.ORDER_ID GROUP BY p.PRODUCT_ID, p.PRODUCT_NAME"
  },
  {
    "title": "30. Find dates with multiple orders.",
    "hint": "GROUP BY ORDER_DATE, use HAVING COUNT(*) > 1.",
    "sql": "SELECT ORDER_DATE, COUNT(*) AS OrderCount FROM Orders GROUP BY ORDER_DATE HAVING COUNT(*) > 1 ORDER BY ORDER_DATE"
  },
  {
    "title": "31. Calculate the total discount amount for each product.",
    "hint": "JOIN Products and Order Details, use SUM(UNIT_PRICE * QUANTITY * DISCOUNT).",
    "sql": "SELECT p.PRODUCT_NAME, SUM(od.UNIT_PRICE * od.QUANTITY * od.DISCOUNT) AS TotalDiscount FROM Products p JOIN ORDER_DETAILS od ON p.PRODUCT_ID = od.PRODUCT_ID GROUP BY p.PRODUCT_ID, p.PRODUCT_NAME"
  },
  {
    "title": "32. Find the employee who sold to the most different countries.",
    "hint": "JOIN Employees, Orders and Customers, use COUNT(DISTINCT Country).",
    "sql": "SELECT e.FIRSTNAME || ' ' || e.LASTNAME AS EmployeeName, COUNT(DISTINCT c.Country) AS CountriesCount FROM Employees e JOIN Orders o ON e.EMPLOYEE_ID = o.EMPLOYEE_ID JOIN Customers c ON o.CUSTOMER_ID = c.CUSTOMER_ID GROUP BY e.EMPLOYEE_ID, e.FIRSTNAME, e.LASTNAME ORDER BY COUNT(DISTINCT c.Country) DESC FETCH FIRST 1 ROW ONLY"
  },
  {
    "title": "33. List orders that have not been shipped yet.",
    "hint": "Use WHERE SHIPPED_DATE IS NULL condition.",
    "sql": "SELECT ORDER_ID, CUSTOMER_ID, ORDER_DATE FROM Orders WHERE SHIPPED_DATE IS NULL"
  },
  {
    "title": "34. Find employees who have not taken any orders.",
    "hint": "Use LEFT JOIN between Employees and Orders, filter WHERE ORDER_ID IS NULL.",
    "sql": "SELECT e.FIRSTNAME || ' ' || e.LASTNAME AS EmployeeName FROM Employees e LEFT JOIN Orders o ON e.EMPLOYEE_ID = o.EMPLOYEE_ID WHERE o.EMPLOYEE_ID IS NULL"
  },
  {
    "title": "35. Calculate the average product price for each order.",
    "hint": "GROUP BY ORDER_ID in Order Details, use AVG(UNIT_PRICE).",
    "sql": "SELECT ORDER_ID, AVG(UNIT_PRICE) AS AvgProductPrice FROM ORDER_DETAILS GROUP BY ORDER_ID"
  },
  {
    "title": "36. Show order details with running totals using window functions.",
    "hint": "Use SUM() OVER (PARTITION BY ORDER_ID) window function.",
    "sql": "SELECT od.ORDER_ID, od.PRODUCT_ID, od.UNIT_PRICE, od.QUANTITY, od.DISCOUNT, SUM(od.UNIT_PRICE * od.QUANTITY * (1 - od.DISCOUNT)) OVER (PARTITION BY od.ORDER_ID) AS OrderTotal FROM ORDER_DETAILS od"
  },
  {
    "title": "37. Calculate gross revenue and net revenue for each product.",
    "hint": "Compare revenue with and without discount calculations.",
    "sql": "SELECT p.PRODUCT_NAME, SUM(od.UNIT_PRICE * od.QUANTITY) AS GrossRevenue, SUM(od.UNIT_PRICE * od.QUANTITY * (1 - od.DISCOUNT)) AS NetRevenue FROM Products p JOIN ORDER_DETAILS od ON p.PRODUCT_ID = od.PRODUCT_ID GROUP BY p.PRODUCT_ID, p.PRODUCT_NAME"
  },
  {
    "title": "38. List cities by number of customers in descending order.",
    "hint": "GROUP BY City in Customers table, use COUNT(*).",
    "sql": "SELECT City, COUNT(*) AS CustomerCount FROM Customers GROUP BY City ORDER BY COUNT(*) DESC"
  },
  {
    "title": "39. Show category revenue by year.",
    "hint": "JOIN Orders, Order Details, Products and Categories, group by year and category.",
    "sql": "SELECT EXTRACT(YEAR FROM o.ORDER_DATE) AS OrderYear, c.CATEGORY_NAME, SUM(od.UNIT_PRICE * od.QUANTITY * (1 - od.DISCOUNT)) AS CategoryRevenue FROM Orders o JOIN ORDER_DETAILS od ON o.ORDER_ID = od.ORDER_ID JOIN Products p ON od.PRODUCT_ID = p.PRODUCT_ID JOIN Categories c ON p.CATEGORY_ID = c.CATEGORY_ID GROUP BY EXTRACT(YEAR FROM o.ORDER_DATE), c.CATEGORY_ID, c.CATEGORY_NAME ORDER BY OrderYear, CategoryRevenue DESC"
  },
  {
    "title": "40. Find order details where quantity is greater than 1.",
    "hint": "Use WHERE QUANTITY > 1 condition in Order Details.",
    "sql": "SELECT ORDER_ID, PRODUCT_ID, QUANTITY FROM ORDER_DETAILS WHERE QUANTITY > 1"
  },
  {
    "title": "41. Find customers who placed multiple orders on the same date.",
    "hint": "GROUP BY CUSTOMER_ID and ORDER_DATE, use HAVING COUNT(*) > 1.",
    "sql": "SELECT CUSTOMER_ID, ORDER_DATE, COUNT(*) AS OrderCount FROM Orders GROUP BY CUSTOMER_ID, ORDER_DATE HAVING COUNT(*) > 1"
  },
  {
    "title": "42. Calculate average shipping days by year.",
    "hint": "Use DATEDIFF for shipping time, group by EXTRACT(YEAR FROM ORDER_DATE).",
    "sql": "SELECT EXTRACT(YEAR FROM ORDER_DATE) AS OrderYear, AVG(SHIPPED_DATE - ORDER_DATE) AS AvgShippingDays FROM Orders WHERE SHIPPED_DATE IS NOT NULL GROUP BY EXTRACT(YEAR FROM ORDER_DATE)"
  },
  {
    "title": "43. Show supplier statistics: product count and total revenue.",
    "hint": "JOIN Suppliers, Products and Order Details tables.",
    "sql": "SELECT s.COMPANY_NAME, COUNT(DISTINCT p.PRODUCT_ID) AS ProductCount, SUM(od.UNIT_PRICE * od.QUANTITY * (1 - od.DISCOUNT)) AS TotalRevenue FROM Suppliers s JOIN Products p ON s.SUPPLIER_ID = p.SUPPLIER_ID JOIN ORDER_DETAILS od ON p.PRODUCT_ID = od.PRODUCT_ID GROUP BY s.SUPPLIER_ID, s.COMPANY_NAME"
  },
  {
    "title": "44. Find products with above-average revenue.",
    "hint": "Use subquery to calculate average product revenue, then filter with HAVING.",
    "sql": "SELECT p.PRODUCT_NAME, SUM(od.UNIT_PRICE * od.QUANTITY * (1 - od.DISCOUNT)) AS ProductRevenue FROM Products p JOIN ORDER_DETAILS od ON p.PRODUCT_ID = od.PRODUCT_ID GROUP BY p.PRODUCT_ID, p.PRODUCT_NAME HAVING SUM(od.UNIT_PRICE * od.QUANTITY * (1 - od.DISCOUNT)) > (SELECT AVG(SUM(od2.UNIT_PRICE * od2.QUANTITY * (1 - od2.DISCOUNT))) FROM ORDER_DETAILS od2 GROUP BY od2.PRODUCT_ID)"
  },
  {
    "title": "45. Find the maximum and minimum price for each category.",
    "hint": "JOIN Categories and Products, use MAX() and MIN() functions.",
    "sql": "SELECT c.CATEGORY_NAME, MAX(p.UNIT_PRICE) AS MaxPrice, MIN(p.UNIT_PRICE) AS MinPrice FROM Categories c JOIN Products p ON c.CATEGORY_ID = p.CATEGORY_ID GROUP BY c.CATEGORY_ID, c.CATEGORY_NAME"
  },
  {
    "title": "46. Find suppliers who provide only one product.",
    "hint": "GROUP BY SUPPLIER_ID, use HAVING COUNT(*) = 1.",
    "sql": "SELECT s.COMPANY_NAME FROM Suppliers s JOIN Products p ON s.SUPPLIER_ID = p.SUPPLIER_ID GROUP BY s.SUPPLIER_ID, s.COMPANY_NAME HAVING COUNT(*) = 1"
  },
  {
    "title": "47. Find orders where discount exceeds 10% of total amount.",
    "hint": "Compare total discount with 10% of total amount using HAVING.",
    "sql": "SELECT ORDER_ID, SUM(UNIT_PRICE * QUANTITY * DISCOUNT) AS TotalDiscount, SUM(UNIT_PRICE * QUANTITY) AS TotalAmount FROM ORDER_DETAILS GROUP BY ORDER_ID HAVING SUM(UNIT_PRICE * QUANTITY * DISCOUNT) > SUM(UNIT_PRICE * QUANTITY) * 0.1"
  },
  {
    "title": "48. Show monthly order counts for years 1996-1998.",
    "hint": "Use EXTRACT(YEAR FROM xx) and EXTRACT(MONTH FROM xx) functions, group by both, filter by year range.",
    "sql": "SELECT EXTRACT(YEAR FROM ORDER_DATE) AS OrderYear, EXTRACT(MONTH FROM ORDER_DATE) AS OrderMonth, COUNT(*) AS OrderCount FROM Orders WHERE EXTRACT(YEAR FROM ORDER_DATE) BETWEEN 1996 AND 1998 GROUP BY EXTRACT(YEAR FROM ORDER_DATE), EXTRACT(MONTH FROM ORDER_DATE) ORDER BY OrderYear, OrderMonth"
  },
  {
    "title": "49. Create a pivot table showing quantity of first 3 products per order.",
    "hint": "Use CASE WHEN statements to create columns for each product.",
    "sql": "SELECT ORDER_ID, SUM(CASE WHEN PRODUCT_ID = 1 THEN QUANTITY ELSE 0 END) AS Product1, SUM(CASE WHEN PRODUCT_ID = 2 THEN QUANTITY ELSE 0 END) AS Product2, SUM(CASE WHEN PRODUCT_ID = 3 THEN QUANTITY ELSE 0 END) AS Product3 FROM ORDER_DETAILS GROUP BY ORDER_ID"
  },
  {
    "title": "50. Calculate the average order processing time (shipment - order) in days per employee.",
    "hint": "Use AVG(DATEDIFF(ShippedDate, OrderDate))",
    "sql": "SELECT e.FIRSTNAME || ' ' || e.LASTNAME AS EmployeeName, AVG(o.SHIPPED_DATE - o.ORDER_DATE) AS AvgShippingDays FROM Employees e JOIN Orders o ON e.EMPLOYEE_ID = o.EMPLOYEE_ID WHERE o.SHIPPED_DATE IS NOT NULL GROUP BY e.EMPLOYEE_ID, e.FIRSTNAME, e.LASTNAME"
  },
  {
    "title": "51. Find the most expensive product and its price in each order.",
    "hint": "Window function RANK() OVER (PARTITION BY OrderID ORDER BY UnitPrice DESC)",
    "sql": "SELECT ORDER_ID, PRODUCT_ID, UNIT_PRICE FROM ( SELECT ORDER_ID, PRODUCT_ID, UNIT_PRICE, RANK() OVER (PARTITION BY ORDER_ID ORDER BY UNIT_PRICE DESC) as rn FROM ORDER_DETAILS ) ranked WHERE rn = 1"
  },
  {
    "title": "52. List each customer's first order date and total number of orders.",
    "hint": "MIN(OrderDate) and COUNT(*) functions",
    "sql": "SELECT c.COMPANY_NAME, MIN(o.ORDER_DATE) AS FirstOrderDate, COUNT(o.ORDER_ID) AS TotalOrders FROM Customers c JOIN Orders o ON c.CUSTOMER_ID = o.CUSTOMER_ID GROUP BY c.CUSTOMER_ID, c.COMPANY_NAME"
  },
  {
    "title": "53. Calculate the average discount rate for each order.",
    "hint": "AVG(Discount) with GROUP BY OrderID",
    "sql": "SELECT ORDER_ID, AVG(DISCOUNT) AS AvgDiscountRate FROM ORDER_DETAILS GROUP BY ORDER_ID"
  },
  {
    "title": "54. Compare employees' average shipping time performance.",
    "hint": "AVG(DATEDIFF) for each employee with ranking",
    "sql": "SELECT e.FIRSTNAME || ' ' || e.LASTNAME AS EmployeeName, AVG(o.SHIPPED_DATE - o.ORDER_DATE) AS AvgShippingDays, RANK() OVER (ORDER BY AVG(o.SHIPPED_DATE - o.ORDER_DATE)) AS PerformanceRank FROM Employees e JOIN Orders o ON e.EMPLOYEE_ID = o.EMPLOYEE_ID WHERE o.SHIPPED_DATE IS NOT NULL GROUP BY e.EMPLOYEE_ID, e.FIRSTNAME, e.LASTNAME"
  },
  {
    "title": "55. Have two employees entered orders for the same customer on the same day?",
    "hint": "GROUP BY CustomerID, OrderDate with COUNT(DISTINCT EmployeeID) > 1",
    "sql": "SELECT CUSTOMER_ID, ORDER_DATE, COUNT(DISTINCT EMPLOYEE_ID) AS EmployeeCount FROM Orders GROUP BY CUSTOMER_ID, ORDER_DATE HAVING COUNT(DISTINCT EMPLOYEE_ID) > 1"
  },
  {
    "title": "56. Find each employee's top customer by order volume.",
    "hint": "Window function with RANK()",
    "sql": "SELECT EMPLOYEE_ID, CUSTOMER_ID, OrderCount FROM ( SELECT o.EMPLOYEE_ID, o.CUSTOMER_ID, COUNT(*) AS OrderCount, ROW_NUMBER() OVER (PARTITION BY o.EMPLOYEE_ID ORDER BY COUNT(*) DESC) as rn FROM Orders o GROUP BY o.EMPLOYEE_ID, o.CUSTOMER_ID ) ranked WHERE rn = 1"
  },
  {
    "title": "57. List the employee with the most orders each month.",
    "hint": "Group by YEAR(OrderDate), MONTH(OrderDate)",
    "sql": "SELECT OrderYear, OrderMonth, EMPLOYEE_ID, OrderCount FROM (SELECT EXTRACT(YEAR FROM ORDER_DATE) AS OrderYear, EXTRACT(MONTH FROM ORDER_DATE) AS OrderMonth, EMPLOYEE_ID, COUNT(*) AS OrderCount, ROW_NUMBER() OVER (PARTITION BY EXTRACT(YEAR FROM ORDER_DATE), EXTRACT(MONTH FROM ORDER_DATE) ORDER BY COUNT(*) DESC) as rn FROM Orders GROUP BY EXTRACT(YEAR FROM ORDER_DATE), EXTRACT(MONTH FROM ORDER_DATE), EMPLOYEE_ID) ranked WHERE rn = 1"
  },
  {
    "title": "58. Create a time series table simulating product price changes.",
    "hint": "Use ROW_NUMBER() and LAG() window functions",
    "sql": "SELECT p.PRODUCT_NAME, o.ORDER_DATE, od.UNIT_PRICE, LAG(od.UNIT_PRICE) OVER (PARTITION BY p.PRODUCT_ID ORDER BY o.ORDER_DATE) AS PrevPrice, od.UNIT_PRICE - LAG(od.UNIT_PRICE) OVER (PARTITION BY p.PRODUCT_ID ORDER BY o.ORDER_DATE) AS PriceChange FROM Products p JOIN ORDER_DETAILS od ON p.PRODUCT_ID = od.PRODUCT_ID JOIN Orders o ON od.ORDER_ID = o.ORDER_ID ORDER BY p.PRODUCT_ID, o.ORDER_DATE"
  },
  {
    "title": "59. Calculate the time difference between a customer's previous and last order.",
    "hint": "Use LAG() window function",
    "sql": "SELECT CUSTOMER_ID, ORDER_DATE, LAG(ORDER_DATE) OVER (PARTITION BY CUSTOMER_ID ORDER BY ORDER_DATE) AS PrevOrderDate, (ORDER_DATE - LAG(ORDER_DATE) OVER (PARTITION BY CUSTOMER_ID ORDER BY ORDER_DATE)) AS DaysBetweenOrders FROM Orders ORDER BY CUSTOMER_ID, ORDER_DATE"
  },
  {
    "title": "60. Compare daily average order count and total amount.",
    "hint": "GROUP BY OrderDate with COUNT(*) and SUM()",
    "sql": "SELECT o.ORDER_DATE, COUNT(*) AS OrderCount, SUM(od.UNIT_PRICE * od.QUANTITY * (1 - od.DISCOUNT)) AS TotalAmount, AVG(od.UNIT_PRICE * od.QUANTITY * (1 - od.DISCOUNT)) AS AvgOrderAmount FROM Orders o JOIN ORDER_DETAILS od ON o.ORDER_ID = od.ORDER_ID GROUP BY o.ORDER_DATE ORDER BY o.ORDER_DATE"
  },
  {
    "title": "61. Rank products by price within each order and assign sequence numbers.",
    "hint": "ROW_NUMBER() OVER (PARTITION BY OrderID ORDER BY UnitPrice)",
    "sql": "SELECT ORDER_ID, PRODUCT_ID, UNIT_PRICE, ROW_NUMBER() OVER (PARTITION BY ORDER_ID ORDER BY UNIT_PRICE DESC) AS PriceRank FROM ORDER_DETAILS ORDER BY ORDER_ID, PriceRank"
  },
  {
    "title": "62. Find the top 10% most expensive products each year.",
    "hint": "Use NTILE(10) window function",
    "sql": "SELECT PRODUCT_NAME, OrderYear, UNIT_PRICE, PriceDecile FROM (SELECT p.PRODUCT_NAME, EXTRACT(YEAR FROM o.ORDER_DATE) AS OrderYear, od.UNIT_PRICE, NTILE(10) OVER (PARTITION BY EXTRACT(YEAR FROM o.ORDER_DATE) ORDER BY od.UNIT_PRICE) AS PriceDecile FROM Products p JOIN ORDER_DETAILS od ON p.PRODUCT_ID = od.PRODUCT_ID JOIN Orders o ON od.ORDER_ID = o.ORDER_ID) ranked WHERE PriceDecile = 10"
  },
  {
    "title": "63. Check if employees process orders for each other's customers.",
    "hint": "Self join to check sales to same customer by different employees",
    "sql": "SELECT o1.EMPLOYEE_ID AS Employee1, o2.EMPLOYEE_ID AS Employee2, o1.CUSTOMER_ID, COUNT(*) AS SharedCustomers FROM Orders o1 JOIN Orders o2 ON o1.CUSTOMER_ID = o2.CUSTOMER_ID AND o1.EMPLOYEE_ID != o2.EMPLOYEE_ID GROUP BY o1.EMPLOYEE_ID, o2.EMPLOYEE_ID, o1.CUSTOMER_ID ORDER BY o1.EMPLOYEE_ID, o2.EMPLOYEE_ID"
  },
  {
    "title": "64. Find the average price deviation (std dev / avg) for products in each category.",
    "hint": "Use formula STDDEV() / AVG()",
    "sql": "SELECT c.CATEGORY_NAME, AVG(p.UNIT_PRICE) AS AvgPrice, STDDEV(p.UNIT_PRICE) AS StdDev, STDDEV(p.UNIT_PRICE) / AVG(p.UNIT_PRICE) AS CoefficientOfVariation FROM Categories c JOIN Products p ON c.CATEGORY_ID = p.CATEGORY_ID GROUP BY c.CATEGORY_ID, c.CATEGORY_NAME"
  },
  {
    "title": "65. Check if product prices follow log-normal distribution by calculating mean and variance.",
    "hint": "Calculate AVG() and VAR() on LOG(UnitPrice)",
    "sql": "SELECT AVG(LN(UNIT_PRICE)) AS LogAvgPrice, VARIANCE(LN(UNIT_PRICE)) AS LogVariance, STDDEV(LN(UNIT_PRICE)) AS LogStdDev FROM Products WHERE UNIT_PRICE > 0"
  },
  {
    "title": "66. Find products with no sales in the last 6 months.",
    "hint": "Check orders in last 6 months with LEFT JOIN",
    "sql": "SELECT p.PRODUCT_NAME FROM Products p LEFT JOIN ORDER_DETAILS od ON p.PRODUCT_ID = od.PRODUCT_ID LEFT JOIN Orders o ON od.ORDER_ID = o.ORDER_ID AND o.ORDER_DATE >= ADD_MONTHS(SYSDATE, -6) WHERE o.ORDER_ID IS NULL"
  },
  {
    "title": "67. Compare total sales made to same customer by different employees.",
    "hint": "GROUP BY CustomerID, EmployeeID to compare sales",
    "sql": "SELECT o.CUSTOMER_ID, o.EMPLOYEE_ID, SUM(od.UNIT_PRICE * od.QUANTITY * (1 - od.DISCOUNT)) AS TotalSales FROM Orders o JOIN ORDER_DETAILS od ON o.ORDER_ID = od.ORDER_ID GROUP BY o.CUSTOMER_ID, o.EMPLOYEE_ID ORDER BY o.CUSTOMER_ID, TotalSales DESC"
  },
  {
    "title": "68. Calculate total sales, returns (negative discount orders), and net profit ratio by country.",
    "hint": "Separate positive/negative sales based on Discount values",
    "sql": "SELECT c.Country, SUM(CASE WHEN od.DISCOUNT >= 0 THEN od.UNIT_PRICE * od.QUANTITY * (1 - od.DISCOUNT) END) AS TotalSales, SUM(CASE WHEN od.DISCOUNT < 0 THEN ABS(od.UNIT_PRICE * od.QUANTITY * od.DISCOUNT) END) AS Returns, SUM(od.UNIT_PRICE * od.QUANTITY * (1 - od.DISCOUNT)) AS NetRevenue FROM Customers c JOIN Orders o ON c.CUSTOMER_ID = o.CUSTOMER_ID JOIN ORDER_DETAILS od ON o.ORDER_ID = od.ORDER_ID GROUP BY c.Country"
  },
  {
    "title": "69. Find what percentage of products in each order are discounted.",
    "hint": "Formula: COUNT(CASE WHEN Discount > 0) / COUNT(*) * 100",
    "sql": "SELECT ORDER_ID, COUNT(*) AS TotalProducts, SUM(CASE WHEN DISCOUNT > 0 THEN 1 ELSE 0 END) AS DiscountedProducts, (SUM(CASE WHEN DISCOUNT > 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS DiscountPercentage FROM ORDER_DETAILS GROUP BY ORDER_ID"
  },
  {
    "title": "70. Measure employee-customer interaction duration (first-last order).",
    "hint": "Use formula MAX(OrderDate) - MIN(OrderDate)",
    "sql": "SELECT e.FIRSTNAME || ' ' || e.LASTNAME AS EmployeeName, c.COMPANY_NAME, MIN(o.ORDER_DATE) AS FirstOrder, MAX(o.ORDER_DATE) AS LastOrder, (MAX(o.ORDER_DATE) - MIN(o.ORDER_DATE)) AS InteractionDays FROM Employees e JOIN Orders o ON e.EMPLOYEE_ID = o.EMPLOYEE_ID JOIN Customers c ON o.CUSTOMER_ID = c.CUSTOMER_ID GROUP BY e.EMPLOYEE_ID, e.FIRSTNAME, e.LASTNAME, c.CUSTOMER_ID, c.COMPANY_NAME HAVING COUNT(o.ORDER_ID) > 1"
  },
  {
    "title": "71. Create monthly trend analysis table for each category.",
    "hint": "Group by YEAR(OrderDate), MONTH(OrderDate)",
    "sql": "SELECT c.CATEGORY_NAME, EXTRACT(YEAR FROM o.ORDER_DATE) AS OrderYear, EXTRACT(MONTH FROM o.ORDER_DATE) AS OrderMonth, SUM(od.UNIT_PRICE * od.QUANTITY * (1 - od.DISCOUNT)) AS MonthlyRevenue, LAG(SUM(od.UNIT_PRICE * od.QUANTITY * (1 - od.DISCOUNT))) OVER (PARTITION BY c.CATEGORY_ID ORDER BY EXTRACT(YEAR FROM o.ORDER_DATE), EXTRACT(MONTH FROM o.ORDER_DATE)) AS PrevMonthRevenue FROM Categories c JOIN Products p ON c.CATEGORY_ID = p.CATEGORY_ID JOIN ORDER_DETAILS od ON p.PRODUCT_ID = od.PRODUCT_ID JOIN Orders o ON od.ORDER_ID = o.ORDER_ID GROUP BY c.CATEGORY_ID, c.CATEGORY_NAME, EXTRACT(YEAR FROM o.ORDER_DATE), EXTRACT(MONTH FROM o.ORDER_DATE) ORDER BY c.CATEGORY_NAME, OrderYear, OrderMonth"
  },
  {
    "title": "72. Calculate monthly sales growth percentage.",
    "hint": "Compare with previous month using LAG() window function",
    "sql": "SELECT OrderYear, OrderMonth, MonthlyRevenue, PrevMonthRevenue, CASE WHEN PrevMonthRevenue IS NOT NULL AND PrevMonthRevenue != 0 THEN ((MonthlyRevenue - PrevMonthRevenue) * 100.0 / PrevMonthRevenue) ELSE NULL END AS GrowthPercentage FROM (SELECT EXTRACT(YEAR FROM o.ORDER_DATE) AS OrderYear, EXTRACT(MONTH FROM o.ORDER_DATE) AS OrderMonth, SUM(od.UNIT_PRICE * od.QUANTITY * (1 - od.DISCOUNT)) AS MonthlyRevenue, LAG(SUM(od.UNIT_PRICE * od.QUANTITY * (1 - od.DISCOUNT))) OVER (ORDER BY EXTRACT(YEAR FROM o.ORDER_DATE), EXTRACT(MONTH FROM o.ORDER_DATE)) AS PrevMonthRevenue FROM Orders o JOIN ORDER_DETAILS od ON o.ORDER_ID = od.ORDER_ID GROUP BY EXTRACT(YEAR FROM o.ORDER_DATE), EXTRACT(MONTH FROM o.ORDER_DATE)) monthly_data ORDER BY OrderYear, OrderMonth"
  },
  {
    "title": "73. Create a new metric to determine products' price/performance ratio.",
    "hint": "Develop formula: UnitPrice / (sales quantity or popularity)",
    "sql": "SELECT p.PRODUCT_NAME, p.UNIT_PRICE, SUM(od.QUANTITY) AS TotalSold, COUNT(DISTINCT od.ORDER_ID) AS OrderCount, p.UNIT_PRICE / SUM(od.QUANTITY) AS PricePerUnitSold, p.UNIT_PRICE / COUNT(DISTINCT od.ORDER_ID) AS PricePerOrder FROM Products p JOIN ORDER_DETAILS od ON p.PRODUCT_ID = od.PRODUCT_ID GROUP BY p.PRODUCT_ID, p.PRODUCT_NAME, p.UNIT_PRICE"
  },
  {
    "title": "74. List the fastest shipped orders in the last year.",
    "hint": "Find smallest DATEDIFF(ShippedDate, OrderDate)",
    "sql": "SELECT ORDER_ID, ORDER_DATE, SHIPPED_DATE, (SHIPPED_DATE - ORDER_DATE) AS ShippingDays FROM Orders WHERE ORDER_DATE >= ADD_MONTHS(SYSDATE, -12) AND SHIPPED_DATE IS NOT NULL ORDER BY (SHIPPED_DATE - ORDER_DATE) FETCH FIRST 10 ROWS ONLY"
  },
  {
    "title": "75. Show each customer's 'most expensive' order and the most expensive product in it.",
    "hint": "Use window function with MAX()",
    "sql": "SELECT c.COMPANY_NAME, o.ORDER_ID, od.PRODUCT_ID, p.PRODUCT_NAME, od.UNIT_PRICE FROM ( SELECT CUSTOMER_ID, MAX(OrderTotal) AS MaxOrderTotal FROM ( SELECT o.CUSTOMER_ID, o.ORDER_ID, SUM(od.UNIT_PRICE * od.QUANTITY * (1 - od.DISCOUNT)) AS OrderTotal FROM Orders o JOIN ORDER_DETAILS od ON o.ORDER_ID = od.ORDER_ID GROUP BY o.CUSTOMER_ID, o.ORDER_ID ) order_totals GROUP BY CUSTOMER_ID ) max_orders JOIN Orders o ON max_orders.CUSTOMER_ID = o.CUSTOMER_ID JOIN ORDER_DETAILS od ON o.ORDER_ID = od.ORDER_ID JOIN Products p ON od.PRODUCT_ID = p.PRODUCT_ID JOIN Customers c ON o.CUSTOMER_ID = c.CUSTOMER_ID WHERE od.UNIT_PRICE = ( SELECT MAX(od2.UNIT_PRICE) FROM ORDER_DETAILS od2 WHERE od2.ORDER_ID = od.ORDER_ID )"
  },
  {
    "title": "76. List products that make up 80% of sales (Pareto analysis).",
    "hint": "Calculate 80% of total sales with cumulative sum",
    "sql": "WITH ProductRevenue AS ( SELECT p.PRODUCT_ID, p.PRODUCT_NAME, SUM(od.UNIT_PRICE * od.QUANTITY * (1 - od.DISCOUNT)) AS ProductRevenue FROM Products p JOIN ORDER_DETAILS od ON p.PRODUCT_ID = od.PRODUCT_ID GROUP BY p.PRODUCT_ID, p.PRODUCT_NAME ), RevenueWithCumulative AS ( SELECT PRODUCT_ID, PRODUCT_NAME, ProductRevenue, SUM(ProductRevenue) OVER (ORDER BY ProductRevenue DESC) AS CumulativeRevenue, SUM(ProductRevenue) OVER () AS TotalRevenue FROM ProductRevenue ) SELECT PRODUCT_ID, PRODUCT_NAME, ProductRevenue, (CumulativeRevenue * 100.0 / TotalRevenue) AS CumulativePercentage FROM RevenueWithCumulative WHERE (CumulativeRevenue * 100.0 / TotalRevenue) <= 80 ORDER BY ProductRevenue DESC"
  },
  {
    "title": "77. Calculate the median revenue of products by category.",
    "hint": "Use PERCENTILE_CONT(0.5) window function",
    "sql": "SELECT c.CATEGORY_NAME, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY ProductRevenue) AS MedianRevenue FROM ( SELECT p.CATEGORY_ID, SUM(od.UNIT_PRICE * od.QUANTITY * (1 - od.DISCOUNT)) AS ProductRevenue FROM Products p JOIN ORDER_DETAILS od ON p.PRODUCT_ID = od.PRODUCT_ID GROUP BY p.CATEGORY_ID, p.PRODUCT_ID ) product_revenues JOIN Categories c ON product_revenues.CATEGORY_ID = c.CATEGORY_ID GROUP BY c.CATEGORY_ID, c.CATEGORY_NAME"
  },
  {
    "title": "78. Select products in orders with prices significantly above average.",
    "hint": "Calculate order-based average with AVG() window function",
    "sql": "SELECT od.ORDER_ID, od.PRODUCT_ID, p.PRODUCT_NAME, od.UNIT_PRICE, AvgOrderPrice FROM ORDER_DETAILS od JOIN Products p ON od.PRODUCT_ID = p.PRODUCT_ID JOIN ( SELECT ORDER_ID, AVG(UNIT_PRICE) AS AvgOrderPrice FROM ORDER_DETAILS GROUP BY ORDER_ID ) order_avgs ON od.ORDER_ID = order_avgs.ORDER_ID WHERE od.UNIT_PRICE > order_avgs.AvgOrderPrice * 1.5"
  },
  {
    "title": "79. Identify customers who purchased same product at different prices.",
    "hint": "GROUP BY ProductID, CustomerID with COUNT(DISTINCT UnitPrice) > 1",
    "sql": "SELECT o.CUSTOMER_ID, c.COMPANY_NAME, od.PRODUCT_ID, p.PRODUCT_NAME, COUNT(DISTINCT od.UNIT_PRICE) AS DifferentPrices FROM Orders o JOIN ORDER_DETAILS od ON o.ORDER_ID = od.ORDER_ID JOIN Customers c ON o.CUSTOMER_ID = c.CUSTOMER_ID JOIN Products p ON od.PRODUCT_ID = p.PRODUCT_ID GROUP BY o.CUSTOMER_ID, c.COMPANY_NAME, od.PRODUCT_ID, p.PRODUCT_NAME HAVING COUNT(DISTINCT od.UNIT_PRICE) > 1"
  },
  {
    "title": "80. Show sales trend for each employee over last 3 years (yearly).",
    "hint": "Group by YEAR(OrderDate), filter last 3 years",
    "sql": "SELECT e.FIRSTNAME || ' ' || e.LASTNAME AS EmployeeName, EXTRACT(YEAR FROM o.ORDER_DATE) AS OrderYear, SUM(od.UNIT_PRICE * od.QUANTITY * (1 - od.DISCOUNT)) AS AnnualSales FROM Employees e JOIN Orders o ON e.EMPLOYEE_ID = o.EMPLOYEE_ID JOIN ORDER_DETAILS od ON o.ORDER_ID = od.ORDER_ID WHERE EXTRACT(YEAR FROM o.ORDER_DATE) >= EXTRACT(YEAR FROM SYSDATE) - 3 GROUP BY e.EMPLOYEE_ID, e.FIRSTNAME, e.LASTNAME, EXTRACT(YEAR FROM o.ORDER_DATE) ORDER BY e.EMPLOYEE_ID, EXTRACT(YEAR FROM o.ORDER_DATE)"
  },
  {
    "title": "81. Find average category diversity per order.",
    "hint": "Use COUNT(DISTINCT CategoryID)",
    "sql": "SELECT AVG(CategoryCount) AS AvgCategoriesPerOrder FROM ( SELECT od.ORDER_ID, COUNT(DISTINCT p.CATEGORY_ID) AS CategoryCount FROM ORDER_DETAILS od JOIN Products p ON od.PRODUCT_ID = p.PRODUCT_ID GROUP BY od.ORDER_ID ) order_categories"
  },
  {
    "title": "82. Show percentage ratios of discounted vs non-discounted orders.",
    "hint": "Conditional counting with CASE WHEN Discount = 0",
    "sql": "SELECT SUM(CASE WHEN DISCOUNT = 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS NoDiscountPercentage, SUM(CASE WHEN DISCOUNT > 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS DiscountPercentage FROM ORDER_DETAILS"
  },
  {
    "title": "83. Find months with highest sales for each product category.",
    "hint": "Group by MONTH(OrderDate), use MAX()",
    "sql": "SELECT c.CATEGORY_NAME, OrderMonth, MonthlyRevenue FROM (SELECT p.CATEGORY_ID, EXTRACT(MONTH FROM o.ORDER_DATE) AS OrderMonth, SUM(od.UNIT_PRICE * od.QUANTITY * (1 - od.DISCOUNT)) AS MonthlyRevenue, ROW_NUMBER() OVER (PARTITION BY p.CATEGORY_ID ORDER BY SUM(od.UNIT_PRICE * od.QUANTITY * (1 - od.DISCOUNT)) DESC) as rn FROM Products p JOIN ORDER_DETAILS od ON p.PRODUCT_ID = od.PRODUCT_ID JOIN Orders o ON od.ORDER_ID = o.ORDER_ID GROUP BY p.CATEGORY_ID, EXTRACT(MONTH FROM o.ORDER_DATE)) ranked JOIN Categories c ON ranked.CATEGORY_ID = c.CATEGORY_ID WHERE rn = 1"
  },
  {
    "title": "84. List products with prices dropping below 20% of average.",
    "hint": "Condition: UnitPrice < (SELECT AVG(UnitPrice) * 0.8)",
    "sql": "SELECT p.PRODUCT_NAME, p.UNIT_PRICE, AvgPrice FROM Products p CROSS JOIN (SELECT AVG(UNIT_PRICE) AS AvgPrice FROM Products) avg_calc WHERE p.UNIT_PRICE < avg_calc.AvgPrice * 0.8"
  },
  {
    "title": "85. Time-based change in total revenue of products provided by suppliers.",
    "hint": "Trend analysis with date-based grouping",
    "sql": "SELECT s.COMPANY_NAME, EXTRACT(YEAR FROM o.ORDER_DATE) AS OrderYear, EXTRACT(MONTH FROM o.ORDER_DATE) AS OrderMonth, SUM(od.UNIT_PRICE * od.QUANTITY * (1 - od.DISCOUNT)) AS MonthlyRevenue FROM Suppliers s JOIN Products p ON s.SUPPLIER_ID = p.SUPPLIER_ID JOIN ORDER_DETAILS od ON p.PRODUCT_ID = od.PRODUCT_ID JOIN Orders o ON od.ORDER_ID = o.ORDER_ID GROUP BY s.SUPPLIER_ID, s.COMPANY_NAME, EXTRACT(YEAR FROM o.ORDER_DATE), EXTRACT(MONTH FROM o.ORDER_DATE) ORDER BY s.COMPANY_NAME, OrderYear, OrderMonth"
  },
  {
    "title": "86. Create table showing monthly order count and revenue change per employee.",
    "hint": "YEAR-MONTH grouping with LAG() function",
    "sql": "SELECT e.FIRSTNAME || ' ' || e.LASTNAME AS EmployeeName, EXTRACT(YEAR FROM o.ORDER_DATE) AS OrderYear, EXTRACT(MONTH FROM o.ORDER_DATE) AS OrderMonth, COUNT(o.ORDER_ID) AS OrderCount, SUM(od.UNIT_PRICE * od.QUANTITY * (1 - od.DISCOUNT)) AS MonthlyRevenue, LAG(SUM(od.UNIT_PRICE * od.QUANTITY * (1 - od.DISCOUNT))) OVER (PARTITION BY e.EMPLOYEE_ID ORDER BY EXTRACT(YEAR FROM o.ORDER_DATE), EXTRACT(MONTH FROM o.ORDER_DATE)) AS PrevMonthRevenue FROM Employees e JOIN Orders o ON e.EMPLOYEE_ID = o.EMPLOYEE_ID JOIN ORDER_DETAILS od ON o.ORDER_ID = od.ORDER_ID GROUP BY e.EMPLOYEE_ID, e.FIRSTNAME, e.LASTNAME, EXTRACT(YEAR FROM o.ORDER_DATE), EXTRACT(MONTH FROM o.ORDER_DATE) ORDER BY e.EMPLOYEE_ID, OrderYear, OrderMonth"
  },
  {
    "title": "87. List months with highest customer churn (no sales).",
    "hint": "Find customers active in previous period but not current",
    "sql": "WITH MonthlyCustomers AS (SELECT EXTRACT(YEAR FROM ORDER_DATE) AS OrderYear, EXTRACT(MONTH FROM ORDER_DATE) AS OrderMonth, COUNT(DISTINCT CUSTOMER_ID) AS ActiveCustomers FROM Orders GROUP BY EXTRACT(YEAR FROM ORDER_DATE), EXTRACT(MONTH FROM ORDER_DATE)), CustomerLoss AS (SELECT OrderYear, OrderMonth, ActiveCustomers, LAG(ActiveCustomers) OVER (ORDER BY OrderYear, OrderMonth) AS PrevMonthCustomers, LAG(ActiveCustomers) OVER (ORDER BY OrderYear, OrderMonth) - ActiveCustomers AS CustomerLoss FROM MonthlyCustomers) SELECT OrderYear, OrderMonth, CustomerLoss FROM CustomerLoss WHERE CustomerLoss > 0 ORDER BY CustomerLoss DESC FETCH FIRST 5 ROWS ONLY"
  },
  {
    "title": "88. List products with increasing sales for 2 consecutive years.",
    "hint": "Compare annual sales trends with LAG()",
    "sql": "WITH YearlySales AS (SELECT p.PRODUCT_ID, p.PRODUCT_NAME, EXTRACT(YEAR FROM o.ORDER_DATE) AS OrderYear, SUM(od.UNIT_PRICE * od.QUANTITY * (1 - od.DISCOUNT)) AS AnnualSales FROM Products p JOIN ORDER_DETAILS od ON p.PRODUCT_ID = od.PRODUCT_ID JOIN Orders o ON od.ORDER_ID = o.ORDER_ID GROUP BY p.PRODUCT_ID, p.PRODUCT_NAME, EXTRACT(YEAR FROM o.ORDER_DATE)), SalesGrowth AS (SELECT PRODUCT_ID, PRODUCT_NAME, OrderYear, AnnualSales, LAG(AnnualSales) OVER (PARTITION BY PRODUCT_ID ORDER BY OrderYear) AS PrevYearSales, CASE WHEN AnnualSales > LAG(AnnualSales) OVER (PARTITION BY PRODUCT_ID ORDER BY OrderYear) THEN 1 ELSE 0 END AS IsGrowth FROM YearlySales) SELECT PRODUCT_ID, PRODUCT_NAME FROM SalesGrowth WHERE IsGrowth = 1 GROUP BY PRODUCT_ID, PRODUCT_NAME HAVING COUNT(*) >= 2"
  },
  {
    "title": "89. Comparative analysis of order delivery times across countries.",
    "hint": "Calculate AVG(DATEDIFF) by Country",
    "sql": "SELECT c.Country, COUNT(o.ORDER_ID) AS TotalOrders, AVG(o.SHIPPED_DATE - o.ORDER_DATE) AS AvgShippingDays, MIN(o.SHIPPED_DATE - o.ORDER_DATE) AS MinShippingDays, MAX(o.SHIPPED_DATE - o.ORDER_DATE) AS MaxShippingDays FROM Customers c JOIN Orders o ON c.CUSTOMER_ID = o.CUSTOMER_ID WHERE o.SHIPPED_DATE IS NOT NULL GROUP BY c.Country ORDER BY AvgShippingDays"
  },
  {
    "title": "90. Identify orders containing multiple products from same category.",
    "hint": "GROUP BY OrderID, CategoryID with COUNT(DISTINCT ProductID) > 1",
    "sql": "SELECT od.ORDER_ID, p.CATEGORY_ID, c.CATEGORY_NAME, COUNT(DISTINCT od.PRODUCT_ID) AS ProductCount FROM ORDER_DETAILS od JOIN Products p ON od.PRODUCT_ID = p.PRODUCT_ID JOIN Categories c ON p.CATEGORY_ID = c.CATEGORY_ID GROUP BY od.ORDER_ID, p.CATEGORY_ID, c.CATEGORY_NAME HAVING COUNT(DISTINCT od.PRODUCT_ID) > 1"
  },
  {
    "title": "91. Analyze customers' shopping habits within a year (frequency, amount, variety).",
    "hint": "Monthly basis with COUNT(), SUM(), COUNT(DISTINCT)",
    "sql": "SELECT c.COMPANY_NAME, EXTRACT(YEAR FROM o.ORDER_DATE) AS OrderYear, COUNT(o.ORDER_ID) AS OrderFrequency, SUM(od.UNIT_PRICE * od.QUANTITY * (1 - od.DISCOUNT)) AS TotalSpent, COUNT(DISTINCT od.PRODUCT_ID) AS ProductVariety, COUNT(DISTINCT p.CATEGORY_ID) AS CategoryVariety FROM Customers c JOIN Orders o ON c.CUSTOMER_ID = o.CUSTOMER_ID JOIN ORDER_DETAILS od ON o.ORDER_ID = od.ORDER_ID JOIN Products p ON od.PRODUCT_ID = p.PRODUCT_ID GROUP BY c.CUSTOMER_ID, c.COMPANY_NAME, EXTRACT(YEAR FROM o.ORDER_DATE) ORDER BY c.COMPANY_NAME, OrderYear"
  },
  {
    "title": "92. Check if correlation exists between product variety in orders and total amount.",
    "hint": "Use CORR() function or manual correlation calculation",
    "sql": "WITH OrderStats AS ( SELECT o.ORDER_ID, COUNT(DISTINCT od.PRODUCT_ID) AS ProductVariety, SUM(od.UNIT_PRICE * od.QUANTITY * (1 - od.DISCOUNT)) AS OrderTotal FROM Orders o JOIN ORDER_DETAILS od ON o.ORDER_ID = od.ORDER_ID GROUP BY o.ORDER_ID ) SELECT (COUNT(*) * SUM(ProductVariety * OrderTotal) - SUM(ProductVariety) * SUM(OrderTotal)) / (SQRT(COUNT(*) * SUM(ProductVariety * ProductVariety) - POWER(SUM(ProductVariety), 2)) * SQRT(COUNT(*) * SUM(OrderTotal * OrderTotal) - POWER(SUM(OrderTotal), 2))) AS Correlation FROM OrderStats"
  },
  {
    "title": "93. List product categories with highest average price increases.",
    "hint": "Calculate AVG(UnitPrice) change over time",
    "sql": "WITH CategoryPricesByYear AS (SELECT c.CATEGORY_ID, c.CATEGORY_NAME, EXTRACT(YEAR FROM o.ORDER_DATE) AS OrderYear, AVG(od.UNIT_PRICE) AS AvgPrice FROM Categories c JOIN Products p ON c.CATEGORY_ID = p.CATEGORY_ID JOIN ORDER_DETAILS od ON p.PRODUCT_ID = od.PRODUCT_ID JOIN Orders o ON od.ORDER_ID = o.ORDER_ID GROUP BY c.CATEGORY_ID, c.CATEGORY_NAME, EXTRACT(YEAR FROM o.ORDER_DATE)), PriceGrowth AS (SELECT CATEGORY_ID, CATEGORY_NAME, OrderYear, AvgPrice, LAG(AvgPrice) OVER (PARTITION BY CATEGORY_ID ORDER BY OrderYear) AS PrevYearPrice, AvgPrice - LAG(AvgPrice) OVER (PARTITION BY CATEGORY_ID ORDER BY OrderYear) AS PriceIncrease FROM CategoryPricesByYear) SELECT CATEGORY_NAME, AVG(PriceIncrease) AS AvgPriceIncrease FROM PriceGrowth WHERE PriceIncrease IS NOT NULL GROUP BY CATEGORY_ID, CATEGORY_NAME ORDER BY AvgPriceIncrease DESC"
  },
  {
    "title": "94. Find country-based count of employee-customer matches.",
    "hint": "Count DISTINCT EmployeeID-CustomerID pairs",
    "sql": "SELECT c.Country, COUNT(DISTINCT CONCAT(o.EMPLOYEE_ID, '-', o.CUSTOMER_ID)) AS UniqueEmployeeCustomerPairs FROM Customers c JOIN Orders o ON c.CUSTOMER_ID = o.CUSTOMER_ID GROUP BY c.Country ORDER BY UniqueEmployeeCustomerPairs DESC"
  },
  {
    "title": "95. Calculate each employee's customer loyalty score (based on repeat purchases).",
    "hint": "Average order count per customer by employee",
    "sql": "SELECT e.FIRSTNAME || ' ' || e.LASTNAME AS EmployeeName, COUNT(DISTINCT o.CUSTOMER_ID) AS UniqueCustomers, COUNT(o.ORDER_ID) AS TotalOrders, COUNT(o.ORDER_ID) * 1.0 / COUNT(DISTINCT o.CUSTOMER_ID) AS CustomerLoyaltyScore FROM Employees e JOIN Orders o ON e.EMPLOYEE_ID = o.EMPLOYEE_ID GROUP BY e.EMPLOYEE_ID, e.FIRSTNAME, e.LASTNAME ORDER BY CustomerLoyaltyScore DESC"
  },
  {
    "title": "96. Standardize product prices (z-score normalization).",
    "hint": "Formula: (UnitPrice - AVG(UnitPrice)) / STDDEV(UnitPrice)",
    "sql": "SELECT PRODUCT_NAME, UNIT_PRICE, AvgPrice, StdDev, (UNIT_PRICE - AvgPrice) / StdDev AS ZScore FROM Products p CROSS JOIN (SELECT AVG(UNIT_PRICE) AS AvgPrice, STDDEV(UNIT_PRICE) AS StdDev FROM Products) stats WHERE StdDev > 0"
  },
  {
    "title": "97. Calculate average growth rate based on past years for year-end sales forecast.",
    "hint": "Compare annual sales to calculate growth rate",
    "sql": "WITH YearlySales AS (SELECT EXTRACT(YEAR FROM o.ORDER_DATE) AS OrderYear, SUM(od.UNIT_PRICE * od.QUANTITY * (1 - od.DISCOUNT)) AS AnnualSales FROM Orders o JOIN ORDER_DETAILS od ON o.ORDER_ID = od.ORDER_ID GROUP BY EXTRACT(YEAR FROM o.ORDER_DATE)), GrowthRates AS (SELECT OrderYear, AnnualSales, LAG(AnnualSales) OVER (ORDER BY OrderYear) AS PrevYearSales, (AnnualSales - LAG(AnnualSales) OVER (ORDER BY OrderYear)) * 100.0 / NULLIF(LAG(AnnualSales) OVER (ORDER BY OrderYear), 0) AS GrowthRate FROM YearlySales), LastYearData AS (SELECT MAX(OrderYear) AS LastYear, MAX(AnnualSales) KEEP (DENSE_RANK LAST ORDER BY OrderYear) AS LastYearSales FROM YearlySales) SELECT (SELECT AVG(GrowthRate) FROM GrowthRates WHERE GrowthRate IS NOT NULL) AS AvgGrowthRate, (SELECT LastYear FROM LastYearData) AS LastYear, (SELECT LastYearSales FROM LastYearData) AS LastYearSales, (SELECT LastYearSales FROM LastYearData) * (1 + (SELECT AVG(GrowthRate) FROM GrowthRates WHERE GrowthRate IS NOT NULL)/100) AS ProjectedSales FROM DUAL"
  },
  {
    "title": "98. Show products with highest returns (negative discounts) and their rates.",
    "hint": "Find return transactions with Discount < 0 condition",
    "sql": "SELECT p.PRODUCT_NAME, SUM(CASE WHEN od.DISCOUNT < 0 THEN 1 ELSE 0 END) AS ReturnCount, COUNT(*) AS TotalOrders, SUM(CASE WHEN od.DISCOUNT < 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS ReturnRate FROM Products p JOIN ORDER_DETAILS od ON p.PRODUCT_ID = od.PRODUCT_ID GROUP BY p.PRODUCT_ID, p.PRODUCT_NAME HAVING SUM(CASE WHEN od.DISCOUNT < 0 THEN 1 ELSE 0 END) > 0 ORDER BY ReturnRate DESC"
  },
  {
    "title": "99. Find total revenue from customers in the same city.",
    "hint": "GROUP BY City with SUM(order amount)",
    "sql": "SELECT City, COUNT(DISTINCT c.CUSTOMER_ID) AS CustomerCount, SUM(od.UNIT_PRICE * od.QUANTITY * (1 - od.DISCOUNT)) AS TotalRevenue FROM Customers c JOIN Orders o ON c.CUSTOMER_ID = o.CUSTOMER_ID JOIN ORDER_DETAILS od ON o.ORDER_ID = od.ORDER_ID GROUP BY City ORDER BY TotalRevenue DESC"
  },
  {
    "title": "100. Find customers who didn't place another order within 1 year of their first order.",
    "hint": "Find first order with MIN(OrderDate), check 1 year later",
    "sql": "WITH CustomerFirstOrder AS ( SELECT CUSTOMER_ID, MIN(ORDER_DATE) AS FirstOrderDate FROM Orders GROUP BY CUSTOMER_ID ), CustomerSecondOrder AS ( SELECT o.CUSTOMER_ID, MIN(o.ORDER_DATE) AS SecondOrderDate FROM Orders o JOIN CustomerFirstOrder cfo ON o.CUSTOMER_ID = cfo.CUSTOMER_ID WHERE o.ORDER_DATE > cfo.FirstOrderDate GROUP BY o.CUSTOMER_ID ) SELECT c.COMPANY_NAME, cfo.FirstOrderDate FROM Customers c JOIN CustomerFirstOrder cfo ON c.CUSTOMER_ID = cfo.CUSTOMER_ID LEFT JOIN CustomerSecondOrder cso ON c.CUSTOMER_ID = cso.CUSTOMER_ID WHERE cso.SecondOrderDate IS NULL OR cso.SecondOrderDate > ADD_MONTHS(cfo.FirstOrderDate, 12)"
  }
]
